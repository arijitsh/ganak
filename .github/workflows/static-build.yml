# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: static binary build

on:
  push:
    branches: [ "nodonkey" ]
  pull_request:
    branches: [ "nodonkey" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: 'true'
    - uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install Dependencies
      run: |
        pip install numpy lit

    - name: Install gmp for Mac
      if: matrix.os == 'macos-13'
      run: | 
        HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
        HOMEBREW_NO_AUTO_UPDATE=1 brew install zlib
        HOMEBREW_NO_AUTO_UPDATE=1 brew install mpfr
        HOMEBREW_NO_AUTO_UPDATE=1 brew install gmp
        # wget https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz
        # tar xf gmp-6.3.0.tar.xz
        # cd gmp-6.3.0
        # ./configure --enable-static -enable-cxx --enable-shared
        # make -j8
        # sudo make install
        # cd ..
    
    - name: Install gmp for Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get install libgmp-dev libmpfr-dev
        # wget https://ftp.gnu.org/gnu/gmp/gmp-6.3.0.tar.xz
        # tar xf gmp-6.3.0.tar.xz
        # cd gmp-6.3.0
        # ./configure --enable-static -enable-cxx --enable-shared
        # make -j8
        # sudo make install
        # cd ..
      
    - name: Checkout Cadical
      uses: actions/checkout@v4
      with:
        repository: meelgroup/cadical
        ref: add_dynamic_lib
        path: cadical
        
    - name: Build Cadical
      run: |
        cd cadical
        CXXFLAGS=-fPIC ./configure --competition
        make -j8
        cd ..

    - name: Checkout Cadiback
      uses: actions/checkout@v4
      with:
        repository: meelgroup/cadiback
        ref: synthesis
        path: cadiback
        
    - name: Build Cadiback
      run: |
        cd cadiback
        CXX=c++ ./configure
        make -j8
        cd ..
    
    - name: Checkout breakid
      uses: actions/checkout@v4
      with:
        repository: meelgroup/breakid
        ref: master
        path: breakid
        
    - name: Build Breakid
      run: |
        cd breakid
        mkdir build
        cd build
        ln -s ../scripts/*.sh .
        ./build_static.sh
        cd ../../

    - name: Checkout CMS
      uses: actions/checkout@v4
      with:
        repository: meelgroup/cryptominisat
        ref: synthesis
        path: cryptominisat
        token: ${{ secrets.BUILD_TOKEN }}
        submodules: 'true'
        
    - name: Build CMS
      run: |
        cd cryptominisat
        mkdir build
        cd build
        ln -s ../scripts/build_scripts/*.sh .
        ./build_static.sh
        cd ../..

    - name: Checkout SBVA
      uses: actions/checkout@v4
      with:
        repository: meelgroup/SBVA
        ref: master
        path: sbva
        
    - name: Build SBVA
      run: |
        cd sbva
        mkdir build
        cd build
        ln -s ../scripts/*.sh .
        ./build_static.sh
        cd ../..

    - name: Checkout cereal
      run: |
        wget https://github.com/USCiLab/cereal/archive/v1.3.2.tar.gz
    - name: Build cereal
      run: |
        tar xvf v1.3.2.tar.gz
        cd cereal-1.3.2
        mkdir build
        cd build
        cmake -DJUST_INSTALL_CEREAL=ON ..
        make -j6
        sudo make install

    - name: Checkout armadillo
      run: |
        wget https://sourceforge.net/projects/arma/files/armadillo-14.0.2.tar.xz
    - name: Build armadillo
      run: |
        tar xvf armadillo-14.0.2.tar.xz
        cd armadillo-14.0.2/
        ./configure
        make -j6
        sudo make install

    - name: Checkout ensmallen
      run: |
        wget https://ensmallen.org/files/ensmallen-2.21.1.tar.gz
    - name: Build ensmallen
      run: |
        tar xvf ensmallen-2.21.1.tar.gz
        cd ensmallen-2.21.1
        mkdir build
        cd build
        cmake ..
        make -j6
        sudo make install

    - name: Checkout mlpack
      uses: actions/checkout@v4
      with:
        repository: mlpack/mlpack
        ref: 4.4.0
        path: mlpack
    - name: Build mlpack
      run: |
        cd mlpack
        mkdir build
        cd build
        cmake -DBUILD_SHARED_LIBS=OFF -DBUILD_CLI_EXECUTABLES=OFF  ..
        # cmake -DBUILD_SHARED_LIBS=OFF -DBUILD_CLI_EXECUTABLES=OFF -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_GO_BINDINGS=OFF -DBUILD_R_BINDINGS=OFF  ..
        make -j6
        sudo make install

    - name: Checkout arjun
      uses: actions/checkout@v4
      with:
        repository: meelgroup/arjun-private
        ref: synthesis2
        path: arjun
        token: ${{ secrets.BUILD_TOKEN }}
    - name: Build arjun
      run: |
        cd arjun
        mkdir build
        cd build
        ln -s ../scripts/*.sh .
        ./build_static.sh
        cd ../..
    
    - name: Checkout approxmc
      uses: actions/checkout@v4
      with:
        repository: meelgroup/approxmc-private
        ref: synthesis
        path: approxmc
        token: ${{ secrets.BUILD_TOKEN }}
        submodules: 'true'
    - name: Build approxmc
      run: |
        cd approxmc
        mkdir build
        cd build
        ln -s ../scripts/build_scripts/*.sh .
        ./build_static.sh
        cd ../..

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DSTATICCOMPILE=ON
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} 

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }} --verbose
